This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-11-01T10:58:18.265Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.github/
  workflows/
    ci.yml
  dependabot.yml
app/
  assets/
    config/
      manifest.js
    stylesheets/
      application.css
  controllers/
    api/
      v1/
        application_controller.rb
        archives_controller.rb
    application_controller.rb
    errors_controller.rb
    home_controller.rb
  helpers/
    application_helper.rb
  models/
    archive.rb
  views/
    errors/
      internal.html.erb
      not_found.html.erb
      unprocessable.html.erb
    home/
      index.html.erb
    layouts/
      application.html.erb
bin/
  bundle
  docker-start
  rails
  rake
  setup
config/
  environments/
    development.rb
    production.rb
    test.rb
  initializers/
    assets.rb
    content_security_policy.rb
    cors.rb
    filter_parameter_logging.rb
    inflections.rb
    permissions_policy.rb
    rack_attack.rb
    rswag_api.rb
    rswag_ui.rb
  locales/
    en.yml
  application.rb
  appsignal.yml
  boot.rb
  credentials.yml.enc
  environment.rb
  puma.rb
  routes.rb
openapi/
  api/
    v1/
      openapi.yaml
public/
  robots.txt
test/
  controllers/
    api/
      v1/
        archives_controller_test.rb
    errors_controller_test.rb
    home_controller_test.rb
  integration/
    openapi_test.rb
  application_system_test_case.rb
  test_helper.rb
.dockerignore
.gitattributes
.gitignore
.ruby-version
CITATION.cff
config.ru
DEVELOPMENT.md
docker-compose.yml
Dockerfile
Gemfile
Gemfile.lock
LICENSE
Rakefile
README.md

================================================================
Repository Files
================================================================

================
File: .github/workflows/ci.yml
================
name: CI

on: [push]

jobs:
  verify:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Install dependent libraries
        run: sudo apt-get install libarchive-tools libidn11-dev 
      - name: Set up Node
        uses: actions/setup-node@v4.1.0
        with:
          node-version: 15
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.5
          bundler-cache: true

      - name: Run tests
        env:
          RAILS_ENV: test
        run: bundle exec rake test

================
File: .github/dependabot.yml
================
version: 2
updates:
  - package-ecosystem: "bundler"
    directory: "/"
    schedule:
      interval: "daily"
    allow:
    - dependency-type: direct
    - dependency-type: indirect
  - package-ecosystem: "github-actions"
    directory: "/"
    schedule:
      interval: "daily"
  - package-ecosystem: "docker"
    directory: "/"
    schedule:
      interval: "daily"

================
File: app/assets/config/manifest.js
================
//= link_tree ../images
//= link_directory ../stylesheets .css

================
File: app/assets/stylesheets/application.css
================
.text-decoration-hover {
  text-decoration: none;
}

.text-decoration-hover:hover {
  text-decoration: underline;
}

================
File: app/controllers/api/v1/application_controller.rb
================
class Api::V1::ApplicationController < ApplicationController
  skip_before_action :verify_authenticity_token
end

================
File: app/controllers/api/v1/archives_controller.rb
================
class Api::V1::ArchivesController < Api::V1::ApplicationController
  def list
    expires_in(60.days, public: true, "s-maxage" => 60.days) # TODO this needs to be more dynamic to take into account headers from where the file was loaded
    @archive = Archive.new(params[:url])
    render json: @archive.list_files
  end

  def contents
    expires_in(60.days, public: true, "s-maxage" => 60.days) # TODO this needs to be more dynamic to take into account headers from where the file was loaded
    @archive = Archive.new(params[:url])
    contents = @archive.contents(params[:path])
    if contents.nil?
      render json: {:error => "path not found"}, :status => 404
    else
      render json: contents
    end
  end

  def readme
    expires_in(60.days, public: true, "s-maxage" => 60.days) # TODO this needs to be more dynamic to take into account headers from where the file was loaded
    @archive = Archive.new(params[:url])
    readme = @archive.readme
    if readme.nil?
      render json: {:error => "path not found"}, :status => 404
    else
      render json: readme
    end
  end

  def changelog
    expires_in(60.days, public: true, "s-maxage" => 60.days) # TODO this needs to be more dynamic to take into account headers from where the file was loaded
    @archive = Archive.new(params[:url])
    changelog = @archive.changelog
    if changelog.nil?
      render json: {:error => "path not found"}, :status => 404
    else
      render json: changelog
    end
  end
end

================
File: app/controllers/application_controller.rb
================
class ApplicationController < ActionController::Base
  after_action lambda {
    request.session_options[:skip] = true
  }
end

================
File: app/controllers/errors_controller.rb
================
class ErrorsController < ApplicationController
  def not_found
    respond_to do |format|
      format.html { render status: :not_found }
      format.json { render json: { error: "not found" }, status: :not_found }
      format.any { head :not_found }
    end
  end

  def unprocessable
    respond_to do |format|
      format.html { render status: :unprocessable_entity }
      format.json { render json: { error: "unprocessable" }, status: :unprocessable_entity }
      format.any { head :unprocessable_entity }
    end
  end

  def internal
    respond_to do |format|
      format.html { render status: :internal_server_error }
      format.json { render json: { error: "internal server error" }, status: :internal_server_error }
      format.any { head :internal_server_error }
    end
  end
end

================
File: app/controllers/home_controller.rb
================
class HomeController < ApplicationController
  def index
    @formats = [
      {
        name: '.tgz/.tar.gz',
        ecosystems: ['npm', 'pub', 'cran', 'hackage', 'puppet']
      },
      {
        name: '.zip',
        ecosystems: ['go', 'elm']
      },
      {
        name: '.tar',
        ecosystems: ['hex']
      },
      {
        name: '.gem',
        ecosystems: ['rubygems']
      },
      {
        name: '.nupkg',
        ecosystems: ['nuget']
      },
      {
        name: '.crate',
        ecosystems: ['cargo']
      },
    ]
  end
end

================
File: app/helpers/application_helper.rb
================
module ApplicationHelper
end

================
File: app/models/archive.rb
================
class Archive
  attr_accessor :url

  def initialize(url)
    @url = url
  end

  def download_file(dir)
    path = working_directory(dir)
    downloaded_file = File.open(path, "wb")

    request = Typhoeus::Request.new(url, followlocation: true)
    request.on_headers do |response|
      if response.headers && response.headers['Content-Length'] && response.headers['Content-Length'].to_i > 100 * 1024 * 1024
        puts "File is larger than 100MB, aborting download."
        return false
      end
      return nil unless [200,301,302].include? response.code
    end
    request.on_body { |chunk| downloaded_file.write(chunk) }
    request.on_complete { downloaded_file.close }
    request.run
  end

  require 'timeout'

  def extract(dir)
    path = working_directory(dir)
    destination = nil

    if File.size(path) > 100 * 1024 * 1024
      puts "File is larger than 100MB, skipping extraction."
      return nil
    end

    begin
      Timeout::timeout(30) do
        case mime_type(path)
        when "application/zip", "application/java-archive"
          destination = File.join(dir, 'zip')
          `mkdir #{destination} && bsdtar --strip-components=1 -xvf #{path} -C #{destination} > /dev/null 2>&1 `
        when "application/gzip"
          destination = File.join(dir, 'tar')
          `mkdir #{destination} && tar xzf #{path} -C #{destination} --strip-components 1`
        when "application/x-tar"
          if extension == '.gem' # rubygems
            destination = File.join(dir, 'tar')
            data_destination = File.join(dir, 'data')
            data_path = File.join(destination, 'data.tar.gz')
            `mkdir #{destination} && tar xf #{path} -C #{destination} && mkdir #{data_destination} && tar xzf #{data_path} -C #{data_destination}`
            destination = data_destination
          elsif domain == 'repo.hex.pm' # elixir
            destination = File.join(dir, 'tar')
            data_destination = File.join(dir, 'data')
            data_path = File.join(destination, 'contents.tar.gz')
            `mkdir #{destination} && tar xf #{path} -C #{destination} && mkdir #{data_destination} && tar xzf #{data_path} -C #{data_destination}`
            destination = data_destination
          else
            destination = File.join(dir, 'tar')
            `mkdir #{destination} && tar xf #{path} -C #{destination}`
          end
        else
          # not supported
          destination = nil
        end
      end
    rescue Timeout::Error
      puts "The operation timed out after 30 seconds"
      destination = nil
    end

    return destination
  end

  def mime_type(path)
    IO.popen(
      ["file", "--brief", "--mime-type", path],
      in: :close, err: :close
    ) { |io| io.read.chomp }
  end

  def list_files
    Dir.mktmpdir do |dir|
      download_file(dir)
      path = extract(dir)
      return [] if path.nil?
      return Dir.glob("**/*", File::FNM_DOTMATCH, base: path).tap{|a| a.delete(".")}
    end    
  end

  def working_directory(dir)
    File.join(dir, basename)
  end

  def basename
    File.basename(url)
  end

  def extension
    File.extname(basename)
  end

  def domain
    URI.parse(url).host.downcase
  end

  def contents(file_path)
    Dir.mktmpdir do |dir|
      download_file(dir)
      base_path = extract(dir)
      full_path = File.join(base_path, file_path)
      return nil if base_path.nil?
      begin
        return {
          name: file_path,
          directory: false,
          contents: File.read(full_path)
        }
      rescue Errno::EISDIR
        return {
          name: file_path,
          directory: true,
          contents: Dir.glob("**/*", File::FNM_DOTMATCH, base: full_path).tap{|a| a.delete(".")}
        }        
      rescue Errno::ENOENT
        return nil
      end
    end   
  end

  def supported_readme_format?(path)
    [
      /md/i,
      /mdown/i,
      /mkdn/i,
      /mdn/i,
      /mdtext/i,
      /markdown/i,
      /textile/i,
      /org/i,
      /creole/i,
      /mediawiki/i,
      /wiki/i,
      /adoc|asc(iidoc)?/i,
      /re?st(\.txt)?/i,
      /pod/i,
      /rdoc/i
    ].any? do |regexp|
      path =~ /\.(#{regexp})\z/
    end
  end

  def readme
    Dir.mktmpdir do |dir|
      download_file(dir)
      base_path = extract(dir)

      return nil if base_path.nil?
      all_files = Dir.glob("**/*", File::FNM_DOTMATCH, base: base_path).tap{|a| a.delete(".")}

      readme_files = all_files.select{|path| path.match(/^readme/i) }.sort{|path| supported_readme_format?(path) ? 0 : 1 }
      readme_files = readme_files.sort_by(&:length)
      readme_file = readme_files.first

      return nil if readme_file.nil?

      raw = File.read(File.join(base_path, readme_file))
      html = GitHub::Markup.render(readme_file, raw.force_encoding("UTF-8"))
      language = GitHub::Markup.language(readme_file, raw.force_encoding("UTF-8")).try(:name)

      return {
        name: readme_file,
        raw: raw,
        html: html,
        plain: Nokogiri::HTML(html).try(:text),
        extension: File.extname(readme_file),
        language: language,
        other_readme_files: readme_files - [readme_file]
      }
    end
  end

  def changelog
    Dir.mktmpdir do |dir|
      download_file(dir)
      base_path = extract(dir)

      return nil if base_path.nil?
      all_files = Dir.glob("**/*", File::FNM_DOTMATCH, base: base_path).tap{|a| a.delete(".")}

      changelog_files = all_files.select{|path| path.match(/^CHANGE|^HISTORY|^NEWS/i) }.sort{|path| supported_readme_format?(path) ? 0 : 1 }

      changelog_files = changelog_files.sort_by(&:length)
      return nil if changelog_files.empty?

      changelog_file = changelog_files.first

      raw = File.read(File.join(base_path, changelog_file))
      html = GitHub::Markup.render(changelog_file, raw.force_encoding("UTF-8"))
      language = GitHub::Markup.language(changelog_file, raw.force_encoding("UTF-8")).try(:name)

      return {
        name: changelog_file,
        raw: raw,
        html: html,
        plain: Nokogiri::HTML(html).try(:text),
        parsed: Vandamme::Parser.new(changelog: raw).parse,
        extension: File.extname(changelog_file),
        language: language,
        other_readme_files: changelog_files - [changelog_file]
      }
    end
  end
end

================
File: app/views/errors/internal.html.erb
================
<div class="container-sm text-center">
  <h2>Oops, We've had a problem at our end.</h2>
  <p>Hopefully this a temporary setback.  Try again in a few moments.</p>
</div>

================
File: app/views/errors/not_found.html.erb
================
<div class="container-sm text-center">
  <h2>We can't find whatever it was you were looking for.</h2>
  <p>It may have been deleted, or might not even exist.</p>
</div>

================
File: app/views/errors/unprocessable.html.erb
================
<div class="container-sm text-center">
  <h2>Unprocessable request</h2>
  <p>Check your request parameters and try again.</p>
</div>

================
File: app/views/home/index.html.erb
================
<div class="col-lg-4 container-sm text-center">
  <form class="row g-2 justify-content-center" action='<%= list_api_v1_archives_path %>' method="get">
    <div class="col-auto">
      <label for="repo_name" class="visually-hidden">Tarball URL</label>
      <input name='url' type="text" class="form-control" id="url" placeholder="URL: eg https://registry.npmjs.org/google-playstore-stats-viewer/-/google-playstore-stats-viewer-1.0.32.tgz" size="50">
    </div>
    <div class="col-auto">
      <button type="submit" class="btn btn-primary mb-3">View</button>
    </div>
  </form>
</div>

<div class="container-sm col-lg-6 mt-4">
  <h4 class='mb-3'>Supported ecosystems and file formats:</h4>
  <% @formats.each do |format| %>
    <div class="card mb-3 registry d-flex">
      <div class="card-body pb-1">
        <div class="d-flex">
          
          <div class="flex-grow-1 ms-3 text-break">
            <h5 class='card-title'>
              <%= format[:name] %>
            </h5>
          
            <p class="card-subtitle mb-2 text-muted">
              Ecosystems: <%= format[:ecosystems].join(', ') %>
            </p>
          </div>
          <div class="flex-shrink-0">
           
          </div>  
        </div>
      </div>
    </div>
  <% end %>
</div>

================
File: app/views/layouts/application.html.erb
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
      Ecosyste.ms: Archives
    </title>
    <meta name="description" content="An open API service for inspecting package archives and files from many open source software ecosystems">
    <%= csrf_meta_tags %>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <%= stylesheet_link_tag "application", :media => "all" %>
  </head>
  <body>
    <div class="main">
      <div class="px-4 container-sm pt-2 mt-5 text-center">
        <h1 class="display-5 fw-bold">
          <a href="/" class="text-decoration-hover link-dark">Ecosyste.ms: Archives</a>
        </h1>
        <div class="col-lg-6 mx-auto">
          <p class="lead mb-4">
            An open API service for inspecting package archives and files from many open source software ecosystems
          </p>
        </div>
      </div>

      <%= yield %>
    </div>

    <footer class="py-5 container-sm text-muted text-center">
      <%= link_to 'About', 'https://ecosyste.ms', class: 'link-dark', target: :_blank  %> — 
      <%= link_to 'Blog', "https://blog.ecosyste.ms", class: 'link-dark', target: :_blank  %> — 
      <%= link_to 'API', rswag_ui_path, class: 'link-dark', target: :_blank  %> — 
      <%= link_to 'Status', 'https://ecosystems.appsignal-status.com/', class: 'link-dark', target: :_blank  %>
      <br/>
      <%= link_to 'GitHub', "https://github.com/ecosyste-ms/archives", class: 'link-dark', target: :_blank  %> —
      <%= link_to 'Open Collective', "https://opencollective.com/ecosystems", class: 'link-dark', target: :_blank  %> —  
      <%= link_to 'Twitter', "https://twitter.com/ecosyste_ms", class: 'link-dark', target: :_blank  %> —  
      <%= link_to 'Mastodon', "https://mastodon.social/@ecosystems", class: 'link-dark', target: :_blank  %>
      <br/>
      Code: <%= link_to 'AGPL-3', 'https://github.com/ecosyste-ms/archives/blob/main/LICENSE', class: 'link-dark' %>  — 
      Data: <%= link_to 'CC BY-SA 4.0', 'https://creativecommons.org/licenses/by-sa/4.0/', class: 'link-dark', target: :_blank %>
    </footer>
  </body>
</html>

================
File: bin/bundle
================
#!/usr/bin/env ruby
# frozen_string_literal: true

#
# This file was generated by Bundler.
#
# The application 'bundle' is installed as part of a gem, and
# this file is here to facilitate running it.
#

require "rubygems"

m = Module.new do
  module_function

  def invoked_as_script?
    File.expand_path($0) == File.expand_path(__FILE__)
  end

  def env_var_version
    ENV["BUNDLER_VERSION"]
  end

  def cli_arg_version
    return unless invoked_as_script? # don't want to hijack other binstubs
    return unless "update".start_with?(ARGV.first || " ") # must be running `bundle update`
    bundler_version = nil
    update_index = nil
    ARGV.each_with_index do |a, i|
      if update_index && update_index.succ == i && a =~ Gem::Version::ANCHORED_VERSION_PATTERN
        bundler_version = a
      end
      next unless a =~ /\A--bundler(?:[= ](#{Gem::Version::VERSION_PATTERN}))?\z/
      bundler_version = $1
      update_index = i
    end
    bundler_version
  end

  def gemfile
    gemfile = ENV["BUNDLE_GEMFILE"]
    return gemfile if gemfile && !gemfile.empty?

    File.expand_path("../Gemfile", __dir__)
  end

  def lockfile
    lockfile =
      case File.basename(gemfile)
      when "gems.rb" then gemfile.sub(/\.rb$/, gemfile)
      else "#{gemfile}.lock"
      end
    File.expand_path(lockfile)
  end

  def lockfile_version
    return unless File.file?(lockfile)
    lockfile_contents = File.read(lockfile)
    return unless lockfile_contents =~ /\n\nBUNDLED WITH\n\s{2,}(#{Gem::Version::VERSION_PATTERN})\n/
    Regexp.last_match(1)
  end

  def bundler_requirement
    @bundler_requirement ||=
      env_var_version || cli_arg_version ||
        bundler_requirement_for(lockfile_version)
  end

  def bundler_requirement_for(version)
    return "#{Gem::Requirement.default}.a" unless version

    bundler_gem_version = Gem::Version.new(version)

    requirement = bundler_gem_version.approximate_recommendation

    return requirement unless Gem.rubygems_version < Gem::Version.new("2.7.0")

    requirement += ".a" if bundler_gem_version.prerelease?

    requirement
  end

  def load_bundler!
    ENV["BUNDLE_GEMFILE"] ||= gemfile

    activate_bundler
  end

  def activate_bundler
    gem_error = activation_error_handling do
      gem "bundler", bundler_requirement
    end
    return if gem_error.nil?
    require_error = activation_error_handling do
      require "bundler/version"
    end
    return if require_error.nil? && Gem::Requirement.new(bundler_requirement).satisfied_by?(Gem::Version.new(Bundler::VERSION))
    warn "Activating bundler (#{bundler_requirement}) failed:\n#{gem_error.message}\n\nTo install the version of bundler this project requires, run `gem install bundler -v '#{bundler_requirement}'`"
    exit 42
  end

  def activation_error_handling
    yield
    nil
  rescue StandardError, LoadError => e
    e
  end
end

m.load_bundler!

if m.invoked_as_script?
  load Gem.bin_path("bundler", "bundle")
end

================
File: bin/docker-start
================
#!/bin/sh
set -e

rm -rf tmp/pids

# exec foreman start -d .
exec bundle exec rails s -b 0.0.0.0

================
File: bin/rails
================
#!/usr/bin/env ruby
APP_PATH = File.expand_path("../config/application", __dir__)
require_relative "../config/boot"
require "rails/commands"

================
File: bin/rake
================
#!/usr/bin/env ruby
require_relative "../config/boot"
require "rake"
Rake.application.run

================
File: bin/setup
================
#!/usr/bin/env ruby
require "fileutils"

# path to your application root.
APP_ROOT = File.expand_path("..", __dir__)

def system!(*args)
  system(*args) || abort("\n== Command #{args} failed ==")
end

FileUtils.chdir APP_ROOT do
  # This script is a way to set up or update your development environment automatically.
  # This script is idempotent, so that you can run it at any time and get an expectable outcome.
  # Add necessary setup steps to this file.

  puts "== Installing dependencies =="
  system! "gem install bundler --conservative"
  system("bundle check") || system!("bundle install")

  puts "\n== Removing old logs and tempfiles =="
  system! "bin/rails log:clear tmp:clear"

  puts "\n== Restarting application server =="
  system! "bin/rails restart"
end

================
File: config/environments/development.rb
================
require "active_support/core_ext/integer/time"

Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # In the development environment your application's code is reloaded any time
  # it changes. This slows down response time but is perfect for development
  # since you don't have to restart the web server when you make code changes.
  config.cache_classes = false

  # Do not eager load code on boot.
  config.eager_load = false

  # Show full error reports.
  config.consider_all_requests_local = true

  # Enable server timing
  config.server_timing = true

  # Enable/disable caching. By default caching is disabled.
  # Run rails dev:cache to toggle caching.
  if Rails.root.join("tmp/caching-dev.txt").exist?
    config.action_controller.perform_caching = true
    config.action_controller.enable_fragment_cache_logging = true

    config.cache_store = :memory_store
    config.public_file_server.headers = {
      "Cache-Control" => "public, max-age=#{2.days.to_i}"
    }
  else
    config.action_controller.perform_caching = false

    config.cache_store = :null_store
  end

  # Don't care if the mailer can't send.
  # config.action_mailer.raise_delivery_errors = false

  # config.action_mailer.perform_caching = false

  # Print deprecation notices to the Rails logger.
  config.active_support.deprecation = :log

  # Raise exceptions for disallowed deprecations.
  config.active_support.disallowed_deprecation = :raise

  # Tell Active Support which deprecation messages to disallow.
  config.active_support.disallowed_deprecation_warnings = []

  # Suppress logger output for asset requests.
  config.assets.quiet = true

  # Raises error for missing translations.
  # config.i18n.raise_on_missing_translations = true

  # Annotate rendered view with file names.
  # config.action_view.annotate_rendered_view_with_filenames = true

  # Uncomment if you wish to allow Action Cable access from any origin.
  # config.action_cable.disable_request_forgery_protection = true
end

================
File: config/environments/production.rb
================
require "active_support/core_ext/integer/time"

Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # Code is not reloaded between requests.
  config.cache_classes = true

  # Eager load code on boot. This eager loads most of Rails and
  # your application in memory, allowing both threaded web servers
  # and those relying on copy on write to perform better.
  # Rake tasks automatically ignore this option for performance.
  config.eager_load = true

  # Full error reports are disabled and caching is turned on.
  config.consider_all_requests_local       = false
  config.action_controller.perform_caching = true

  # Ensures that a master key has been made available in either ENV["RAILS_MASTER_KEY"]
  # or in config/master.key. This key is used to decrypt credentials (and other encrypted files).
  # config.require_master_key = true

  # Disable serving static files from the `/public` folder by default since
  # Apache or NGINX already handles this.
  config.public_file_server.enabled = ENV["RAILS_SERVE_STATIC_FILES"].present?

  # Compress CSS using a preprocessor.
  # config.assets.css_compressor = :sass

  # Do not fallback to assets pipeline if a precompiled asset is missed.
  config.assets.compile = false

  # Enable serving of images, stylesheets, and JavaScripts from an asset server.
  # config.asset_host = "http://assets.example.com"

  # Specifies the header that your server uses for sending files.
  # config.action_dispatch.x_sendfile_header = "X-Sendfile" # for Apache
  # config.action_dispatch.x_sendfile_header = "X-Accel-Redirect" # for NGINX

  # Mount Action Cable outside main process or domain.
  # config.action_cable.mount_path = nil
  # config.action_cable.url = "wss://example.com/cable"
  # config.action_cable.allowed_request_origins = [ "http://example.com", /http:\/\/example.*/ ]

  # Force all access to the app over SSL, use Strict-Transport-Security, and use secure cookies.
  # config.force_ssl = true

  # Include generic and useful information about system operation, but avoid logging too much
  # information to avoid inadvertent exposure of personally identifiable information (PII).
  config.log_level = :info

  # Prepend all log lines with the following tags.
  config.log_tags = [ :request_id ]

  # Use a different cache store in production.
  # config.cache_store = :mem_cache_store

  # Use a real queuing backend for Active Job (and separate queues per environment).
  # config.active_job.queue_adapter     = :resque
  # config.active_job.queue_name_prefix = "archives_production"

  # config.action_mailer.perform_caching = false

  # Ignore bad email addresses and do not raise email delivery errors.
  # Set this to true and configure the email server for immediate delivery to raise delivery errors.
  # config.action_mailer.raise_delivery_errors = false

  # Enable locale fallbacks for I18n (makes lookups for any locale fall back to
  # the I18n.default_locale when a translation cannot be found).
  config.i18n.fallbacks = true

  # Don't log any deprecations.
  config.active_support.report_deprecations = false

  # Use default logging formatter so that PID and timestamp are not suppressed.
  config.log_formatter = ::Logger::Formatter.new

  # Use a different logger for distributed setups.
  # require "syslog/logger"
  # config.logger = ActiveSupport::TaggedLogging.new(Syslog::Logger.new "app-name")

  if ENV["RAILS_LOG_TO_STDOUT"].present?
    logger           = ActiveSupport::Logger.new(STDOUT)
    logger.formatter = config.log_formatter
    config.logger    = ActiveSupport::TaggedLogging.new(logger)
  end

  config.secret_key_base = '<%= ENV["SECRET_KEY_BASE"] %>'
end

================
File: config/environments/test.rb
================
require "active_support/core_ext/integer/time"

# The test environment is used exclusively to run your application's
# test suite. You never need to work with it otherwise. Remember that
# your test database is "scratch space" for the test suite and is wiped
# and recreated between test runs. Don't rely on the data there!

Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # Turn false under Spring and add config.action_view.cache_template_loading = true.
  config.cache_classes = true

  # Eager loading loads your whole application. When running a single test locally,
  # this probably isn't necessary. It's a good idea to do in a continuous integration
  # system, or in some way before deploying your code.
  config.eager_load = ENV["CI"].present?

  # Configure public file server for tests with Cache-Control for performance.
  config.public_file_server.enabled = true
  config.public_file_server.headers = {
    "Cache-Control" => "public, max-age=#{1.hour.to_i}"
  }

  # Show full error reports and disable caching.
  config.consider_all_requests_local       = true
  config.action_controller.perform_caching = false
  config.cache_store = :null_store

  # Raise exceptions instead of rendering exception templates.
  config.action_dispatch.show_exceptions = false

  # Disable request forgery protection in test environment.
  config.action_controller.allow_forgery_protection = false

  # config.action_mailer.perform_caching = false

  # Tell Action Mailer not to deliver emails to the real world.
  # The :test delivery method accumulates sent emails in the
  # ActionMailer::Base.deliveries array.
  # config.action_mailer.delivery_method = :test

  # Print deprecation notices to the stderr.
  config.active_support.deprecation = :stderr

  # Raise exceptions for disallowed deprecations.
  config.active_support.disallowed_deprecation = :raise

  # Tell Active Support which deprecation messages to disallow.
  config.active_support.disallowed_deprecation_warnings = []

  # Raises error for missing translations.
  # config.i18n.raise_on_missing_translations = true

  # Annotate rendered view with file names.
  # config.action_view.annotate_rendered_view_with_filenames = true
end

================
File: config/initializers/assets.rb
================
# Be sure to restart your server when you modify this file.

# Version of your assets, change this if you want to expire all your assets.
Rails.application.config.assets.version = "1.0"

# Add additional assets to the asset load path.
# Rails.application.config.assets.paths << Emoji.images_path

# Precompile additional assets.
# application.js, application.css, and all non-JS/CSS in the app/assets
# folder are already added.
# Rails.application.config.assets.precompile += %w( admin.js admin.css )

================
File: config/initializers/content_security_policy.rb
================
# Be sure to restart your server when you modify this file.

# Define an application-wide content security policy
# For further information see the following documentation
# https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy

# Rails.application.configure do
#   config.content_security_policy do |policy|
#     policy.default_src :self, :https
#     policy.font_src    :self, :https, :data
#     policy.img_src     :self, :https, :data
#     policy.object_src  :none
#     policy.script_src  :self, :https
#     policy.style_src   :self, :https
#     # Specify URI for violation reports
#     # policy.report_uri "/csp-violation-report-endpoint"
#   end
#
#   # Generate session nonces for permitted importmap and inline scripts
#   config.content_security_policy_nonce_generator = ->(request) { request.session.id.to_s }
#   config.content_security_policy_nonce_directives = %w(script-src)
#
#   # Report CSP violations to a specified URI. See:
#   # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy-Report-Only
#   # config.content_security_policy_report_only = true
# end

================
File: config/initializers/cors.rb
================
Rails.application.config.middleware.insert_before 0, Rack::Cors do
  allow do
    origins '*'
    resource /^\/api\/.+/, headers: :any, methods: [:get, :post, :patch, :put, :delete, :options, :head]
  end
end

================
File: config/initializers/filter_parameter_logging.rb
================
# Be sure to restart your server when you modify this file.

# Configure parameters to be filtered from the log file. Use this to limit dissemination of
# sensitive information. See the ActiveSupport::ParameterFilter documentation for supported
# notations and behaviors.
Rails.application.config.filter_parameters += [
  :passw, :secret, :token, :_key, :crypt, :salt, :certificate, :otp, :ssn
]

================
File: config/initializers/inflections.rb
================
# Be sure to restart your server when you modify this file.

# Add new inflection rules using the following format. Inflections
# are locale specific, and you may define rules for as many different
# locales as you wish. All of these examples are active by default:
# ActiveSupport::Inflector.inflections(:en) do |inflect|
#   inflect.plural /^(ox)$/i, "\\1en"
#   inflect.singular /^(ox)en/i, "\\1"
#   inflect.irregular "person", "people"
#   inflect.uncountable %w( fish sheep )
# end

# These inflection rules are supported but not enabled by default:
# ActiveSupport::Inflector.inflections(:en) do |inflect|
#   inflect.acronym "RESTful"
# end

================
File: config/initializers/permissions_policy.rb
================
# Define an application-wide HTTP permissions policy. For further
# information see https://developers.google.com/web/updates/2018/06/feature-policy
#
# Rails.application.config.permissions_policy do |f|
#   f.camera      :none
#   f.gyroscope   :none
#   f.microphone  :none
#   f.usb         :none
#   f.fullscreen  :self
#   f.payment     :self, "https://secure.example.com"
# end

================
File: config/initializers/rack_attack.rb
================
Rack::Attack.throttle("requests by ip", limit: 5000, period: 1.hour) do |request|
  request.ip
end

================
File: config/initializers/rswag_api.rb
================
Rswag::Api.configure do |c|

  # Specify a root folder where Swagger JSON files are located
  # This is used by the Swagger middleware to serve requests for API descriptions
  # NOTE: If you're using rswag-specs to generate Swagger, you'll need to ensure
  # that it's configured to generate files in the same folder
  c.openapi_root = Rails.root.to_s + '/openapi'

  # Inject a lamda function to alter the returned Swagger prior to serialization
  # The function will have access to the rack env for the current request
  # For example, you could leverage this to dynamically assign the "host" property
  #
  #c.openapi_filter = lambda { |swagger, env| swagger['host'] = env['HTTP_HOST'] }
end

================
File: config/initializers/rswag_ui.rb
================
Rswag::Ui.configure do |c|

  # List the Swagger endpoints that you want to be documented through the swagger-ui
  # The first parameter is the path (absolute or relative to the UI host) to the corresponding
  # endpoint and the second is a title that will be displayed in the document selector
  # NOTE: If you're using rspec-api to expose Swagger files (under openapi_root) as JSON or YAML endpoints,
  # then the list below should correspond to the relative paths for those endpoints

  c.openapi_endpoint '/docs/api/v1/openapi.yaml', 'API V1 Docs'

  # Add Basic Auth in case your API is private
  # c.basic_auth_enabled = true
  # c.basic_auth_credentials 'username', 'password'
end

================
File: config/locales/en.yml
================
# Files in the config/locales directory are used for internationalization
# and are automatically loaded by Rails. If you want to use locales other
# than English, add the necessary files in this directory.
#
# To use the locales, use `I18n.t`:
#
#     I18n.t "hello"
#
# In views, this is aliased to just `t`:
#
#     <%= t("hello") %>
#
# To use a different locale, set it with `I18n.locale`:
#
#     I18n.locale = :es
#
# This would use the information in config/locales/es.yml.
#
# The following keys must be escaped otherwise they will not be retrieved by
# the default I18n backend:
#
# true, false, on, off, yes, no
#
# Instead, surround them with single quotes.
#
# en:
#   "true": "foo"
#
# To learn more, please read the Rails Internationalization guide
# available at https://guides.rubyonrails.org/i18n.html.

en:
  hello: "Hello world"

================
File: config/application.rb
================
require_relative "boot"

require "rails"
# Pick the frameworks you want:
# require "active_model/railtie"
# require "active_job/railtie"
# require "active_record/railtie"
# require "active_storage/engine"
require "action_controller/railtie"
# require "action_mailer/railtie"
# require "action_mailbox/engine"
# require "action_text/engine"
require "action_view/railtie"
# require "action_cable/engine"
require "rails/test_unit/railtie"

# Require the gems listed in Gemfile, including any gems
# you've limited to :test, :development, or :production.
Bundler.require(*Rails.groups)

module Archives
  class Application < Rails::Application
    # Initialize configuration defaults for originally generated Rails version.
    config.load_defaults 7.0
    config.exceptions_app = routes

    # Configuration for the application, engines, and railties goes here.
    #
    # These settings can be overridden in specific environments using the files
    # in config/environments, which are processed later.
    #
    # config.time_zone = "Central Time (US & Canada)"
    # config.eager_load_paths << Rails.root.join("extras")
  end
end

================
File: config/appsignal.yml
================
production:
  ignore_errors:
    - ActiveRecord::RecordNotFound
    - ActionController::RoutingError

================
File: config/boot.rb
================
ENV["BUNDLE_GEMFILE"] ||= File.expand_path("../Gemfile", __dir__)

require "bundler/setup" # Set up gems listed in the Gemfile.

================
File: config/credentials.yml.enc
================
5IH68qB12Jc36/B/Chm2yyIPSwe1yWlqWnQAXFW7W3C6B/4N08+4gXBy9fpFZX4ZIoaGqZA7NSXsDqKOR3tkXblJmUDcpC0cQPQFAh1bcprbu73fUHV/kqtKrLycQtyKIteVDjC5i1Pvo7xMgE9CHYjuarBTlgVDanm9tGbmDN38orMyPrZpXtD8z8aBfkStGLBHa0RLqpcA2ntubILHjZQA3wcF09s2OXPbVqJQDHE83LF0DoipnTXk6HIeSetkNMsruUBszCZsNZ6VU+UK+imLBI/oVRmneWv1CefaNjRKc+mQ/Nh08Nu9C9qJKysw0OPWCDFwzAxQFzqm4tXa7TUmDa+1tbr9Rzde25DEDFJ8sFom4WWwTmc1y8LwFEgvlcALQbznZdW4drUCUQKxniH+p0bcRbTylKDD--1HKr4wueaLuLUeXG--WzZF/+mm8jPx3pU0J2vzuQ==

================
File: config/environment.rb
================
# Load the Rails application.
require_relative "application"

# Initialize the Rails application.
Rails.application.initialize!

================
File: config/puma.rb
================
# Puma can serve each request in a thread from an internal thread pool.
# The `threads` method setting takes two numbers: a minimum and maximum.
# Any libraries that use thread pools should be configured to match
# the maximum value specified for Puma. Default is set to 5 threads for minimum
# and maximum; this matches the default thread size of Active Record.
#
max_threads_count = ENV.fetch("RAILS_MAX_THREADS") { 5 }
min_threads_count = ENV.fetch("RAILS_MIN_THREADS") { max_threads_count }
threads min_threads_count, max_threads_count

# Specifies the `worker_timeout` threshold that Puma will use to wait before
# terminating a worker in development environments.
#
worker_timeout 3600 if ENV.fetch("RAILS_ENV", "development") == "development"

# Specifies the `port` that Puma will listen on to receive requests; default is 3000.
#
port ENV.fetch("PORT") { 3000 }

# Specifies the `environment` that Puma will run in.
#
environment ENV.fetch("RAILS_ENV") { "development" }

# Specifies the `pidfile` that Puma will use.
pidfile ENV.fetch("PIDFILE") { "tmp/pids/server.pid" }

# Specifies the number of `workers` to boot in clustered mode.
# Workers are forked web server processes. If using threads and workers together
# the concurrency of the application would be max `threads` * `workers`.
# Workers do not work on JRuby or Windows (both of which do not support
# processes).
#
# workers ENV.fetch("WEB_CONCURRENCY") { 2 }

# Use the `preload_app!` method when specifying a `workers` number.
# This directive tells Puma to first boot the application and load code
# before forking the application. This takes advantage of Copy On Write
# process behavior so workers use less memory.
#
# preload_app!

# Allow puma to be restarted by `bin/rails restart` command.
plugin :tmp_restart

================
File: config/routes.rb
================
Rails.application.routes.draw do
  mount Rswag::Ui::Engine => '/docs'
  mount Rswag::Api::Engine => '/docs'
  
  namespace :api, :defaults => {:format => :json} do
    namespace :v1 do
      resources :archives, only: [] do
        collection do
          get :list
          get :contents
          get :readme
          get :changelog
        end
      end
    end
  end

  get '/404', to: 'errors#not_found'
  get '/422', to: 'errors#unprocessable'
  get '/500', to: 'errors#internal'

  root "home#index"
end

================
File: openapi/api/v1/openapi.yaml
================
openapi: 3.0.1
info:
  title: "Ecosyste.ms: Archives"
  description: "An open API service for inspecting package archives and files from many open source software ecosystems. "
  contact:
    name: Ecosyste.ms
    email: support@ecosyste.ms
    url: https://ecosyste.ms 
  version: 1.0.0
  license:
    name: CC-BY-SA-4.0
    url: https://creativecommons.org/licenses/by-sa/4.0/
externalDocs:
  description: GitHub Repository
  url: https://github.com/ecosyste-ms/archives
servers:
- url: https://archives.ecosyste.ms/api/v1
paths:
  /archives/list:
    get:
      summary: list files in a package archive
      operationId: list
      parameters:
        - name: url
          in: query
          description: url to package archive
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /archives/contents:
    get:
      summary: get contents of a path from a package archive
      operationId: contents
      parameters:
        - name: url
          in: query
          description: url to package archive
          required: true
          schema:
            type: string
        - name: path
          in: query
          description: path to file or folder in package archive
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'
  /archives/readme:
    get:
      summary: get readme from a package archive
      operationId: readme
      parameters:
        - name: url
          in: query
          description: url to package archive
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Readme'
  /archives/changelog:
    get:
      summary: get changelog from a package archive
      operationId: changelog
      parameters:
        - name: url
          in: query
          description: url to package archive
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Changelog'
components:
  schemas:
    Content:
      type: object
      properties:
        name:
          type: string
        directory:
          type: boolean
        contents:
          type: string
    Readme:
      type: object
      properties:
        name:
          type: string
        raw:
          type: string
        html:
          type: string
        plain:
          type: string
        extension:
          type: string
        language:
          type: string
        other_readme_files:
          type: array
          items:
            type: string
    Changelog:
      type: object
      properties:
        name:
          type: string
        raw:
          type: string
        html:
          type: string
        plain:
          type: string
        extension:
          type: string
        language:
          type: string

================
File: public/robots.txt
================
# See https://www.robotstxt.org/robotstxt.html for documentation on how to use the robots.txt file
User-agent: *
Disallow: /api

================
File: test/controllers/api/v1/archives_controller_test.rb
================
require 'test_helper'

class ApiV1ArchivesControllerTest < ActionDispatch::IntegrationTest
  test 'list' do
    stub_request(:get, "https://registry.npmjs.org/base62/-/base62-2.0.1.tgz")
      .to_return({ status: 200, body: File.open(File.join(Rails.root, 'test', 'fixtures', 'files','base62-2.0.1.tgz')).read })

    get list_api_v1_archives_path(url: 'https://registry.npmjs.org/base62/-/base62-2.0.1.tgz')
    assert_response :success
    actual_response = JSON.parse(@response.body)

    assert_equal actual_response, [
      ".codeclimate.yml",
      ".eslintignore",
      ".eslintrc",
      ".travis.yml",
      "CODE_OF_CONDUCT.md",
      "CONTRIBUTING.md",
      "LICENSE",
      "Readme.md",
      "benchmark",
      "benchmark/benchmarks.js",
      "benchmark/benchmarks_legacy.js",
      "fork",
      "fork/.editorconfig",
      "fork/.eslintrc",
      "fork/README.md",
      "fork/package.json",
      "fork/src",
      "fork/src/ascii.js",
      "fork/src/custom.js",
      "fork/test",
      "fork/test/test_base62_ascii.js",
      "fork/test/test_base62_custom.js",
      "index.d.ts",
      "lib",
      "lib/ascii.js",
      "lib/custom.js",
      "lib/legacy.js",
      "package.json", 
      "test",
      "test/test_ascii.js",
      "test/test_custom.js",
      "test/test_legacy.js"
    ]
  end

  test 'list zip' do
    stub_request(:get, "https://github.com/adobe/parcel-plugin-htl/archive/refs/heads/master.zip")
      .to_return({ status: 200, body: File.open(File.join(Rails.root, 'test', 'fixtures', 'files','parcel-plugin-htl-master.zip')).read })

    get list_api_v1_archives_path(url: 'https://github.com/adobe/parcel-plugin-htl/archive/refs/heads/master.zip')
    assert_response :success
    actual_response = JSON.parse(@response.body)

    assert_equal actual_response, [".circleci",
      ".circleci/config.yml",
      ".eslintignore",
      ".eslintrc.js",
      ".github",
      ".github/move.yml",
      ".gitignore",
      ".npmignore",
      ".releaserc.js",
      ".snyk",
      "CHANGELOG.md",
      "CODE_OF_CONDUCT.md",
      "CONTRIBUTING.md",
      "LICENSE.txt",
      "README.md",
      "package-lock.json",
      "package.json",
      "src",
      "src/HTLAsset.js",
      "src/HelixJSAsset.js",
      "src/engine",
      "src/engine/RuntimeTemplate.js",
      "src/index.js",
      "test",
      "test/example",
      "test/example/bla.css",
      "test/example/html.htl",
      "test/testGeneratedCode.js"
    ]
  end

  test 'list jar' do
    stub_request(:get, "https://repo.clojars.org/org/clojars/majorcluster/clj-data-adapter/0.2.1/clj-data-adapter-0.2.1.jar")
      .to_return({ status: 200, body: File.open(File.join(Rails.root, 'test', 'fixtures', 'files','clj-data-adapter-0.2.1.jar')).read })

    get list_api_v1_archives_path(url: 'https://repo.clojars.org/org/clojars/majorcluster/clj-data-adapter/0.2.1/clj-data-adapter-0.2.1.jar')
    assert_response :success
    actual_response = JSON.parse(@response.body)

    assert_equal actual_response, ["MANIFEST.MF",
      "core.clj",
      "leiningen",
      "leiningen/org.clojars.majorcluster",
      "leiningen/org.clojars.majorcluster/clj-data-adapter",
      "leiningen/org.clojars.majorcluster/clj-data-adapter/README.md",
      "leiningen/org.clojars.majorcluster/clj-data-adapter/project.clj",
      "maven",
      "maven/org.clojars.majorcluster",
      "maven/org.clojars.majorcluster/clj-data-adapter",
      "maven/org.clojars.majorcluster/clj-data-adapter/pom.properties",
      "maven/org.clojars.majorcluster/clj-data-adapter/pom.xml"
    ]
  end

  test 'contents of a file' do
    stub_request(:get, "https://registry.npmjs.org/base62/-/base62-2.0.1.tgz")
      .to_return({ status: 200, body: File.open(File.join(Rails.root, 'test', 'fixtures', 'files','base62-2.0.1.tgz')).read })

    get contents_api_v1_archives_path(url: 'https://registry.npmjs.org/base62/-/base62-2.0.1.tgz', path: '.eslintignore')
    assert_response :success
    actual_response = JSON.parse(@response.body)

    assert_equal actual_response, {
      "name"=>".eslintignore", 
      "directory"=>false, 
      "contents"=>"**/*{.,-}min.js
"
}
  end
  

  test 'contents of a folder' do
    stub_request(:get, "https://registry.npmjs.org/base62/-/base62-2.0.1.tgz")
      .to_return({ status: 200, body: File.open(File.join(Rails.root, 'test', 'fixtures', 'files','base62-2.0.1.tgz')).read })

    get contents_api_v1_archives_path(url: 'https://registry.npmjs.org/base62/-/base62-2.0.1.tgz', path: 'lib')
    assert_response :success
    actual_response = JSON.parse(@response.body)

    assert_equal actual_response, {
      "name"=>"lib",
      "directory"=>true,
      "contents"=>["ascii.js", "custom.js", "legacy.js"]
    }
  end

  test 'contents of a missing path' do
    stub_request(:get, "https://registry.npmjs.org/base62/-/base62-2.0.1.tgz")
      .to_return({ status: 200, body: File.open(File.join(Rails.root, 'test', 'fixtures', 'files','base62-2.0.1.tgz')).read })

    get contents_api_v1_archives_path(url: 'https://registry.npmjs.org/base62/-/base62-2.0.1.tgz', path: 'fib')
    assert_response :missing
  end

  test 'readme' do
    stub_request(:get, "https://registry.npmjs.org/base62/-/base62-2.0.1.tgz")
      .to_return({ status: 200, body: File.open(File.join(Rails.root, 'test', 'fixtures', 'files','base62-2.0.1.tgz')).read })

    get readme_api_v1_archives_path(url: 'https://registry.npmjs.org/base62/-/base62-2.0.1.tgz')
    assert_response :success
    actual_response = JSON.parse(@response.body)

    assert_equal actual_response['name'], 'Readme.md'
    assert_equal actual_response['raw'][0..30], "# [Base62.js](http://libraries."
    assert_equal actual_response['html'][0..30], "<h1><a href=\"http://libraries.i"
    assert_equal actual_response['plain'][0..8], "Base62.js"
    
    assert_equal actual_response['extension'], '.md'
    assert_equal actual_response['language'], "Markdown"
    assert_equal actual_response['other_readme_files'], []
  end

  test 'changelog' do
    stub_request(:get, "https://github.com/splitrb/split/archive/refs/heads/main.zip")
      .to_return({ status: 200, body: File.open(File.join(Rails.root, 'test', 'fixtures', 'files','main.zip')).read })

    get changelog_api_v1_archives_path(url: 'https://github.com/splitrb/split/archive/refs/heads/main.zip')
    assert_response :success
    actual_response = JSON.parse(@response.body)

    assert_equal actual_response['name'], 'CHANGELOG.md'
    assert_equal actual_response['raw'][0..20], "# 4.0.2 (December 2nd"
    assert_equal actual_response['html'][0..30], "<h1>4.0.2 (December 2nd, 2022)<"
    assert_equal actual_response['plain'][0..8], "4.0.2 (De"
    
    assert_equal actual_response['extension'], '.md'
    assert_equal actual_response['language'], "Markdown"
  end
end

================
File: test/controllers/errors_controller_test.rb
================
require 'test_helper'

class ErrorsControllerTest < ActionDispatch::IntegrationTest
  test 'renders 404' do
    get '/404'
    assert_response :not_found
    assert_template 'errors/not_found'
  end

  test 'renders 422' do
    get '/422'
    assert_response :unprocessable_entity
    assert_template 'errors/unprocessable'
  end

  test 'renders 500' do
    get '/500'
    assert_response :internal_server_error
    assert_template 'errors/internal'
  end
end

================
File: test/controllers/home_controller_test.rb
================
require 'test_helper'

class HomeControllerTest < ActionDispatch::IntegrationTest
  test 'renders index' do
    get root_path
    assert_response :success
    assert_template 'home/index'
  end
end

================
File: test/integration/openapi_test.rb
================
require "test_helper"

class OpenapiTest < ActiveSupport::TestCase
  test 'openapi.yaml is valid' do
    f = YAML.load_file(Rails.root.join('openapi/api/v1/openapi.yaml'))
    assert_equal f.class, Hash
  end
end

================
File: test/application_system_test_case.rb
================
require "test_helper"

class ApplicationSystemTestCase < ActionDispatch::SystemTestCase
  driven_by :selenium, using: :chrome, screen_size: [1400, 1400]
end

================
File: test/test_helper.rb
================
ENV["RAILS_ENV"] ||= "test"
require_relative "../config/environment"
require "rails/test_help"

require 'webmock/minitest'
require 'mocha/minitest'

class ActiveSupport::TestCase
  Shoulda::Matchers.configure do |config|
    config.integrate do |with|
      with.test_framework :minitest
      with.library :rails
    end
  end
end

================
File: .dockerignore
================
.git
.github
.gitignore
README.md

log
test
vendor
openshift/
coverage/
.bundle
.ruby-version

.DS_Store
.AppleDouble
.LSOverride

================
File: .gitattributes
================
# See https://git-scm.com/docs/gitattributes for more about git attribute files.


# Mark any vendored files as having been vendored.
vendor/* linguist-vendored

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files for more about ignoring files.
#
# If you find yourself ignoring temporary files generated by your text editor
# or operating system, you probably want to add a global ignore instead:
#   git config --global core.excludesfile '~/.gitignore_global'

# Ignore bundler config.
/.bundle

# Ignore all logfiles and tempfiles.
/log/*
/tmp/*
!/log/.keep
!/tmp/.keep

# Ignore pidfiles, but keep the directory.
/tmp/pids/*
!/tmp/pids/
!/tmp/pids/.keep


/public/assets

# Ignore master key for decrypting credentials and more.
/config/master.key

================
File: .ruby-version
================
3.3.5

================
File: CITATION.cff
================
cff-version: 1.2.0
title: 'Ecosyste.ms: Archives'
message: >-
  If you use this software, please cite it using the
  metadata from this file.
type: software
authors:
  - given-names: Andrew
    family-names: Nesbitt
    email: andrew@ecosyste.ms
    orcid: 'https://orcid.org/0009-0007-2710-1118'
repository-code: 'https://github.com/ecosyste-ms/archives'
url: 'https://archives.ecosyste.ms'
abstract: >-
  An open API service for inspecting package archives and files from many open source software ecosystems.
keywords:
  - open source
  - package management
  - software
license: AGPL-3.0

================
File: config.ru
================
# This file is used by Rack-based servers to start the application.

require_relative "config/environment"

run Rails.application
Rails.application.load_server

================
File: DEVELOPMENT.md
================
# Development

## Setup

First things first, you'll need to fork and clone the repository to your local machine.

`git clone https://github.com/ecosyste-ms/archives.git`

The project uses ruby on rails which have a number of system dependencies you'll need to install. 

- [ruby 3.3.5](https://www.ruby-lang.org/en/documentation/installation/)
- [node.js 16+](https://nodejs.org/en/download/)

Once you've got all of those installed, from the root directory of the project run the following commands:

```
bundle install
rails server
```

You can then load up [http://localhost:3000](http://localhost:3000) to access the service.

### Docker

Alternatively you can use the existing docker configuration files to run the app in a container.

Run this command from the root directory of the project to start the service.

`docker-compose up --build`

You can then load up [http://localhost:3000](http://localhost:3000) to access the service.

For access the rails console use the following command:

`docker-compose exec app rails console`

## Tests

The applications tests can be found in [test](test) and use the testing framework [minitest](https://github.com/minitest/minitest).

You can run all the tests with:

`rails test`

## Deployment

A container-based deployment is highly recommended, we use [dokku.com](https://dokku.com/).

================
File: docker-compose.yml
================
version: '3'
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - PIDFILE=/usr/src/app/tmp/pids/server.pid
      - RAILS_ENV=development

================
File: Dockerfile
================
FROM ruby:3.3.5-alpine

ENV APP_ROOT=/usr/src/app
ENV DATABASE_PORT=5432
ENV PIP_BREAK_SYSTEM_PACKAGES=1
WORKDIR $APP_ROOT

COPY Gemfile Gemfile.lock $APP_ROOT/

RUN apk add --no-cache \
    build-base \
    netcat-openbsd \
    git \
    tzdata \
    curl-dev \
    libc6-compat \
    tar \
    libarchive-tools \
    icu-dev \
    cmake \
    perl \
    libidn-dev \
    py-pip \
    nodejs \
 && gem update --system \
 && gem install bundler foreman \
 && bundle config set without 'test development' \
 && bundle install --jobs 8 \
 && pip install docutils \
 && npm install -g repopack

COPY . $APP_ROOT

RUN RAILS_ENV=production bundle exec rake assets:precompile

CMD ["bin/docker-start"]

================
File: Gemfile
================
source "https://rubygems.org"
git_source(:github) { |repo| "https://github.com/#{repo}.git" }

ruby "3.3.5"

gem 'railties'
gem 'actionview'
gem 'actionpack'
gem 'activesupport'
gem "sprockets-rails"
gem "puma"
gem "jbuilder"
gem 'typhoeus'
gem "rack-attack"
gem "rack-attack-rate-limit", require: "rack/attack/rate-limit"
gem 'rack-cors'
gem 'rswag-api'
gem 'rswag-ui'
gem "nokogiri"

gem "github-markup", require: "github/markup"
gem "redcarpet", :platforms => :ruby
gem "RedCloth"
gem "commonmarker", '0.23.10'
gem "rdoc"
gem "org-ruby"
gem "creole"
gem "wikicloth", github: 'nricciar/wikicloth'
gem "twitter-text"
gem "asciidoctor"
gem "github-linguist"
gem 'rexml'
gem 'appsignal'
gem 'vandamme', github: 'ecosyste-ms/vandamme'
gem 'ostruct'


group :test do
  gem "shoulda"
  gem "webmock"
  gem "mocha"
  gem "rails-controller-testing"
end

================
File: Gemfile.lock
================
GIT
  remote: https://github.com/ecosyste-ms/vandamme.git
  revision: 27c8682ca8aeb32369d74fd7357b553848df0b92
  specs:
    vandamme (0.0.13)
      commonmarker
      github-markup

GIT
  remote: https://github.com/nricciar/wikicloth.git
  revision: 00226ffc6eb46de12038feb6f4c88275645969f7
  specs:
    wikicloth (0.8.3)
      builder
      expression_parser
      htmlentities
      nokogiri
      twitter-text (>= 2.1)

GEM
  remote: https://rubygems.org/
  specs:
    RedCloth (4.3.4)
    actionpack (7.2.1.2)
      actionview (= 7.2.1.2)
      activesupport (= 7.2.1.2)
      nokogiri (>= 1.8.5)
      racc
      rack (>= 2.2.4, < 3.2)
      rack-session (>= 1.0.1)
      rack-test (>= 0.6.3)
      rails-dom-testing (~> 2.2)
      rails-html-sanitizer (~> 1.6)
      useragent (~> 0.16)
    actionview (7.2.1.2)
      activesupport (= 7.2.1.2)
      builder (~> 3.1)
      erubi (~> 1.11)
      rails-dom-testing (~> 2.2)
      rails-html-sanitizer (~> 1.6)
    activesupport (7.2.1.2)
      base64
      bigdecimal
      concurrent-ruby (~> 1.0, >= 1.3.1)
      connection_pool (>= 2.2.5)
      drb
      i18n (>= 1.6, < 2)
      logger (>= 1.4.2)
      minitest (>= 5.1)
      securerandom (>= 0.3)
      tzinfo (~> 2.0, >= 2.0.5)
    addressable (2.8.7)
      public_suffix (>= 2.0.2, < 7.0)
    appsignal (4.1.2)
      logger
      rack
    asciidoctor (2.0.23)
    base64 (0.2.0)
    bigdecimal (3.1.8)
    builder (3.3.0)
    cgi (0.4.1)
    charlock_holmes (0.7.9)
    commonmarker (0.23.10)
    concurrent-ruby (1.3.4)
    connection_pool (2.4.1)
    crack (1.0.0)
      bigdecimal
      rexml
    crass (1.0.6)
    creole (0.5.0)
    drb (2.2.1)
    erubi (1.13.0)
    ethon (0.16.0)
      ffi (>= 1.15.0)
    expression_parser (0.9.0)
    ffi (1.17.0-aarch64-linux-musl)
    ffi (1.17.0-arm64-darwin)
    ffi (1.17.0-x86_64-darwin)
    ffi (1.17.0-x86_64-linux-gnu)
    ffi (1.17.0-x86_64-linux-musl)
    github-linguist (8.0.1)
      cgi
      charlock_holmes (~> 0.7.7)
      mini_mime (~> 1.0)
      rugged (~> 1.0)
    github-markup (5.0.1)
    hashdiff (1.1.1)
    htmlentities (4.3.4)
    i18n (1.14.6)
      concurrent-ruby (~> 1.0)
    idn-ruby (0.1.5)
    io-console (0.7.2)
    irb (1.14.1)
      rdoc (>= 4.0.0)
      reline (>= 0.4.2)
    jbuilder (2.13.0)
      actionview (>= 5.0.0)
      activesupport (>= 5.0.0)
    logger (1.6.1)
    loofah (2.23.1)
      crass (~> 1.0.2)
      nokogiri (>= 1.12.0)
    mini_mime (1.1.5)
    minitest (5.25.1)
    mocha (2.5.0)
      ruby2_keywords (>= 0.0.5)
    nio4r (2.7.4)
    nokogiri (1.16.7-aarch64-linux)
      racc (~> 1.4)
    nokogiri (1.16.7-arm64-darwin)
      racc (~> 1.4)
    nokogiri (1.16.7-x86_64-darwin)
      racc (~> 1.4)
    nokogiri (1.16.7-x86_64-linux)
      racc (~> 1.4)
    org-ruby (0.9.12)
      rubypants (~> 0.2)
    ostruct (0.6.0)
    psych (5.1.2)
      stringio
    public_suffix (6.0.1)
    puma (6.4.3)
      nio4r (~> 2.0)
    racc (1.8.1)
    rack (3.1.8)
    rack-attack (6.7.0)
      rack (>= 1.0, < 4)
    rack-attack-rate-limit (1.1.0)
      rack
    rack-cors (2.0.2)
      rack (>= 2.0.0)
    rack-session (2.0.0)
      rack (>= 3.0.0)
    rack-test (2.1.0)
      rack (>= 1.3)
    rackup (2.1.0)
      rack (>= 3)
      webrick (~> 1.8)
    rails-controller-testing (1.0.5)
      actionpack (>= 5.0.1.rc1)
      actionview (>= 5.0.1.rc1)
      activesupport (>= 5.0.1.rc1)
    rails-dom-testing (2.2.0)
      activesupport (>= 5.0.0)
      minitest
      nokogiri (>= 1.6)
    rails-html-sanitizer (1.6.0)
      loofah (~> 2.21)
      nokogiri (~> 1.14)
    railties (7.2.1.2)
      actionpack (= 7.2.1.2)
      activesupport (= 7.2.1.2)
      irb (~> 1.13)
      rackup (>= 1.0.0)
      rake (>= 12.2)
      thor (~> 1.0, >= 1.2.2)
      zeitwerk (~> 2.6)
    rake (13.2.1)
    rdoc (6.7.0)
      psych (>= 4.0.0)
    redcarpet (3.6.0)
    reline (0.5.10)
      io-console (~> 0.5)
    rexml (3.3.9)
    rswag-api (2.15.0)
      activesupport (>= 5.2, < 8.0)
      railties (>= 5.2, < 8.0)
    rswag-ui (2.15.0)
      actionpack (>= 5.2, < 8.0)
      railties (>= 5.2, < 8.0)
    ruby2_keywords (0.0.5)
    rubypants (0.7.1)
    rugged (1.7.2)
    securerandom (0.3.1)
    shoulda (4.0.0)
      shoulda-context (~> 2.0)
      shoulda-matchers (~> 4.0)
    shoulda-context (2.0.0)
    shoulda-matchers (4.5.1)
      activesupport (>= 4.2.0)
    sprockets (4.2.1)
      concurrent-ruby (~> 1.0)
      rack (>= 2.2.4, < 4)
    sprockets-rails (3.5.2)
      actionpack (>= 6.1)
      activesupport (>= 6.1)
      sprockets (>= 3.0.0)
    stringio (3.1.1)
    thor (1.3.2)
    twitter-text (3.1.0)
      idn-ruby
      unf (~> 0.1.0)
    typhoeus (1.4.1)
      ethon (>= 0.9.0)
    tzinfo (2.0.6)
      concurrent-ruby (~> 1.0)
    unf (0.1.4)
      unf_ext
    unf_ext (0.0.9.1)
    useragent (0.16.10)
    webmock (3.24.0)
      addressable (>= 2.8.0)
      crack (>= 0.3.2)
      hashdiff (>= 0.4.0, < 2.0.0)
    webrick (1.8.2)
    zeitwerk (2.7.1)

PLATFORMS
  aarch64-linux-musl
  arm64-darwin-21
  arm64-darwin-23
  x86_64-darwin-20
  x86_64-linux
  x86_64-linux-musl

DEPENDENCIES
  RedCloth
  actionpack
  actionview
  activesupport
  appsignal
  asciidoctor
  commonmarker (= 0.23.10)
  creole
  github-linguist
  github-markup
  jbuilder
  mocha
  nokogiri
  org-ruby
  ostruct
  puma
  rack-attack
  rack-attack-rate-limit
  rack-cors
  rails-controller-testing
  railties
  rdoc
  redcarpet
  rexml
  rswag-api
  rswag-ui
  shoulda
  sprockets-rails
  twitter-text
  typhoeus
  vandamme!
  webmock
  wikicloth!

RUBY VERSION
   ruby 3.3.5p0

BUNDLED WITH
   2.5.22

================
File: LICENSE
================
GNU AFFERO GENERAL PUBLIC LICENSE
                       Version 3, 19 November 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU Affero General Public License is a free, copyleft license for
software and other kinds of works, specifically designed to ensure
cooperation with the community in the case of network server software.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
our General Public Licenses are intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  Developers that use our General Public Licenses protect your rights
with two steps: (1) assert copyright on the software, and (2) offer
you this License which gives you legal permission to copy, distribute
and/or modify the software.

  A secondary benefit of defending all users' freedom is that
improvements made in alternate versions of the program, if they
receive widespread use, become available for other developers to
incorporate.  Many developers of free software are heartened and
encouraged by the resulting cooperation.  However, in the case of
software used on network servers, this result may fail to come about.
The GNU General Public License permits making a modified version and
letting the public access it on a server without ever releasing its
source code to the public.

  The GNU Affero General Public License is designed specifically to
ensure that, in such cases, the modified source code becomes available
to the community.  It requires the operator of a network server to
provide the source code of the modified version running there to the
users of that server.  Therefore, public use of a modified version, on
a publicly accessible server, gives the public access to the source
code of the modified version.

  An older license, called the Affero General Public License and
published by Affero, was designed to accomplish similar goals.  This is
a different license, not a version of the Affero GPL, but Affero has
released a new version of the Affero GPL which permits relicensing under
this license.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU Affero General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Remote Network Interaction; Use with the GNU General Public License.

  Notwithstanding any other provision of this License, if you modify the
Program, your modified version must prominently offer all users
interacting with it remotely through a computer network (if your version
supports such interaction) an opportunity to receive the Corresponding
Source of your version by providing access to the Corresponding Source
from a network server at no charge, through some standard or customary
means of facilitating copying of software.  This Corresponding Source
shall include the Corresponding Source for any work covered by version 3
of the GNU General Public License that is incorporated pursuant to the
following paragraph.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the work with which it is combined will remain governed by version
3 of the GNU General Public License.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU Affero General Public License from time to time.  Such new versions
will be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU Affero General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU Affero General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU Affero General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If your software can interact with users remotely through a computer
network, you should also make sure that it provides a way for users to
get its source.  For example, if your program is a web application, its
interface could display a "Source" link that leads users to an archive
of the code.  There are many ways you could offer source, and different
solutions will be better for different programs; see section 13 for the
specific requirements.

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU AGPL, see
<https://www.gnu.org/licenses/>.

================
File: Rakefile
================
# Add your own tasks in files placed in lib/tasks ending in .rake,
# for example lib/tasks/capistrano.rake, and they will automatically be available to Rake.

require_relative "config/application"

Rails.application.load_tasks

================
File: README.md
================
# [Ecosyste.ms: Archives](https://archives.ecosyste.ms)

An open API service for inspecting package archives and files from many open source software ecosystems.

This project is part of [Ecosyste.ms](https://ecosyste.ms): Tools and open datasets to support, sustain, and secure critical digital infrastructure.

## API

Documentation for the REST API is available here: [https://archives.ecosyste.ms/docs](https://archives.ecosyste.ms/docs)

The default rate limit for the API is 5000/req per hour based on your IP address, get in contact if you need to to increase your rate limit.

## Development

For development and deployment documentation, check out [DEVELOPMENT.md](DEVELOPMENT.md)

## Contribute

Please do! The source code is hosted at [GitHub](https://github.com/ecosyste-ms/archives). If you want something, [open an issue](https://github.com/ecosyste-ms/archives/issues/new) or a pull request.

If you need want to contribute but don't know where to start, take a look at the issues tagged as ["Help Wanted"](https://github.com/ecosyste-ms/archives/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22).

You can also help triage issues. This can include reproducing bug reports, or asking for vital information such as version numbers or reproduction instructions. 

Finally, this is an open source project. If you would like to become a maintainer, we will consider adding you if you contribute frequently to the project. Feel free to ask.

For other updates, follow the project on Twitter: [@ecosyste_ms](https://twitter.com/ecosyste_ms).

### Note on Patches/Pull Requests

 * Fork the project.
 * Make your feature addition or bug fix.
 * Add tests for it. This is important so we don't break it in a future version unintentionally.
 * Send a pull request. Bonus points for topic branches.

### Vulnerability disclosure

We support and encourage security research on Ecosyste.ms under the terms of our [vulnerability disclosure policy](https://github.com/ecosyste-ms/archives/security/policy).

### Code of Conduct

Please note that this project is released with a [Contributor Code of Conduct](https://github.com/ecosyste-ms/.github/blob/main/CODE_OF_CONDUCT.md). By participating in this project you agree to abide by its terms.

## Copyright

Code is licensed under [GNU Affero License](LICENSE) © 2023 [Andrew Nesbitt](https://github.com/andrew).

Data from the API is licensed under [CC BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/).
